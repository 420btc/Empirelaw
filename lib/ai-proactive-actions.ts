import type { Country, GameEvent, GameAction } from "@/lib/types"
import { aiDiplomacyService } from "./ai-diplomacy"

export interface AIProactiveAction {
  countryId: string
  action: GameAction
  reasoning: string
  priority: number
}

export interface AIProactiveResult {
  actions: AIProactiveAction[]
  events: GameEvent[]
  updatedCountries: Country[]
}

class AIProactiveActionsService {
  private lastActionTime: Map<string, number> = new Map()
  private readonly ACTION_COOLDOWN = 120000 // 2 minutos entre acciones por pa√≠s
  private readonly MAX_ACTIVE_AI_COUNTRIES = 3 // M√°ximo 3 pa√≠ses IA activos
  private activeAICountries: Set<string> = new Set()
  private lastAIRotation = 0
  private readonly AI_ROTATION_INTERVAL = 60000 // Rotar pa√≠ses IA cada 60 segundos

  /**
   * Eval√∫a si un pa√≠s controlado por IA debe tomar acciones proactivas
   */
  async evaluateProactiveActions(
    countries: Country[],
    playerCountryId: string,
    gameEvents: GameEvent[]
  ): Promise<AIProactiveResult> {
    if (!aiDiplomacyService.isAIEnabled()) {
      console.log('ü§ñ IA no est√° habilitada. Para ver eventos de IA:')
      console.log('   1. Haz clic en "IA Config" en la barra superior')
      console.log('   2. Ingresa tu API key de OpenAI')
      console.log('   3. Activa la opci√≥n "Habilitar IA"')
      return { actions: [], events: [], updatedCountries: countries }
    }

    // Rotar pa√≠ses IA activos cada 60 segundos
    this.rotateActiveAICountries(countries, playerCountryId)

    // Solo procesar pa√≠ses IA activos que pueden tomar acciones
    const aiCountries = countries.filter(country => 
      country.id !== playerCountryId && 
      !country.ownedBy &&
      this.activeAICountries.has(country.id) &&
      this.shouldTakeAction(country)
    )
    
    console.log(`ü§ñ Pa√≠ses IA activos: ${Array.from(this.activeAICountries).join(', ')}`)
    console.log(`ü§ñ Pa√≠ses IA que pueden actuar: ${aiCountries.map(c => c.name).join(', ')}`)

    const actions: AIProactiveAction[] = []
    const events: GameEvent[] = []
    let updatedCountries = [...countries]

    for (const country of aiCountries) {
      try {
        const proactiveAction = await this.generateProactiveAction(
          country,
          countries,
          playerCountryId,
          gameEvents
        )

        if (proactiveAction) {
          actions.push(proactiveAction)
          
          // Ejecutar la acci√≥n y generar evento
          const actionResult = this.executeProactiveAction(
            proactiveAction,
            updatedCountries,
            playerCountryId
          )
          
          if (actionResult.event) {
            events.push(actionResult.event)
          }
          
          updatedCountries = actionResult.updatedCountries
          this.lastActionTime.set(country.id, Date.now())
        }
      } catch (error) {
        console.error(`Error generando acci√≥n proactiva para ${country.name}:`, error)
      }
    }

    console.log(`ü§ñ Resultado: ${actions.length} acciones generadas, ${events.length} eventos creados`)
    
    return { actions, events, updatedCountries }
  }

  /**
   * Determina si un pa√≠s debe considerar tomar una acci√≥n proactiva
   */
  /**
   * Rota los pa√≠ses IA activos cada 30 segundos para simular un comportamiento m√°s realista
   * Solo selecciona pa√≠ses con PIB mayor al del jugador para aumentar la dificultad
   */
  private rotateActiveAICountries(countries: Country[], playerCountryId: string): void {
    const now = Date.now()
    
    // Solo rotar si han pasado 30 segundos desde la √∫ltima rotaci√≥n
    if (now - this.lastAIRotation < this.AI_ROTATION_INTERVAL) {
      return
    }

    this.lastAIRotation = now
    
    // Obtener el PIB del jugador
    const playerCountry = countries.find(c => c.id === playerCountryId)
    const playerGDP = playerCountry?.economy.gdp || 0
    
    // Obtener pa√≠ses IA disponibles con PIB mayor al del jugador
    const availableAICountries = countries.filter(country => 
      country.id !== playerCountryId && 
      !country.ownedBy &&
      country.economy.gdp > playerGDP
    )

    // Si no hay pa√≠ses con PIB mayor, usar los 3 pa√≠ses con mayor PIB disponibles
    if (availableAICountries.length === 0) {
      const fallbackCountries = countries
        .filter(country => country.id !== playerCountryId && !country.ownedBy)
        .sort((a, b) => b.economy.gdp - a.economy.gdp)
        .slice(0, this.MAX_ACTIVE_AI_COUNTRIES)
      
      this.activeAICountries = new Set(fallbackCountries.map(c => c.id))
      console.log(`üîÑ Pa√≠ses IA activos (fallback - mayor PIB): ${Array.from(this.activeAICountries).join(', ')}`)
      return
    }

    // Si hay menos pa√≠ses disponibles que el m√°ximo, usar todos
    if (availableAICountries.length <= this.MAX_ACTIVE_AI_COUNTRIES) {
      this.activeAICountries = new Set(availableAICountries.map(c => c.id))
      console.log(`üîÑ Pa√≠ses IA activos (PIB > jugador): ${Array.from(this.activeAICountries).join(', ')}`)
      return
    }

    // Seleccionar aleatoriamente pa√≠ses IA activos con PIB mayor al jugador
    const shuffled = [...availableAICountries].sort(() => Math.random() - 0.5)
    this.activeAICountries = new Set(
      shuffled.slice(0, this.MAX_ACTIVE_AI_COUNTRIES).map(c => c.id)
    )

    console.log(`üîÑ Pa√≠ses IA activos (PIB > jugador): ${Array.from(this.activeAICountries).join(', ')}`)
  }

  private shouldTakeAction(country: Country): boolean {
    const lastAction = this.lastActionTime.get(country.id) || 0
    const timeSinceLastAction = Date.now() - lastAction
    
    if (timeSinceLastAction < this.ACTION_COOLDOWN) {
      return false
    }

    // IA toma acciones pero con intervalos m√°s largos (1 minuto)
    return true
  }

  /**
   * Genera una acci√≥n proactiva usando IA
   */
  private async generateProactiveAction(
    country: Country,
    allCountries: Country[],
    playerCountryId: string,
    recentEvents: GameEvent[]
  ): Promise<AIProactiveAction | null> {
    const context = this.buildActionContext(country, allCountries, playerCountryId, recentEvents)
    
    const playerCountry = allCountries.find(c => c.id === playerCountryId)
    const playerGDP = playerCountry?.economy.gdp || 0
    
    const prompt = `
Como ${country.name}, eres una SUPERPOTENCIA ECON√ìMICA con ventaja sobre otros pa√≠ses. Tu PIB de $${country.economy.gdp}B te da superioridad econ√≥mica y debes usarla estrat√©gicamente.

üèÜ TU VENTAJA ECON√ìMICA:
- Tu PIB: $${country.economy.gdp}B
- PIB del jugador: $${playerGDP}B
- Ventaja econ√≥mica: ${((country.economy.gdp / Math.max(playerGDP, 1) - 1) * 100).toFixed(1)}%

Tu situaci√≥n actual:
- Estabilidad: ${country.stability}%
- Fuerza Militar: ${country.militaryStrength || 50}%
- Deuda: ${country.economy.debt}B

Como potencia econ√≥mica dominante, DEBES:
‚úÖ Ser agresivo y expansivo
‚úÖ Aprovechar tu superioridad econ√≥mica
‚úÖ Presionar a pa√≠ses m√°s d√©biles
‚úÖ Mantener tu posici√≥n dominante

Opciones de acci√≥n disponibles:
1. military_action - Atacar a otro pa√≠s (costo: $50B)
2. economic_sanction - Sanciones econ√≥micas (costo: $30B)
3. conspiracy - Operaci√≥n encubierta (costo: $40B)

Elige SIEMPRE una acci√≥n (nunca "none"). Como superpotencia, usa prioridad M√ÅXIMA (9-10).

Responde SOLO con un JSON en este formato:
{
  "action": "military_action|economic_sanction|conspiracy",
  "target": "country_id",
  "reasoning": "breve explicaci√≥n de tu estrategia como superpotencia",
  "priority": 9-10
}

Considera:
- Tu superioridad econ√≥mica te permite ser m√°s agresivo
- Pa√≠ses m√°s d√©biles son objetivos estrat√©gicos
- Mant√©n tu dominancia regional
- Expande tu influencia global

${context}`

    try {
      // Validar que playerCountry existe
      if (!playerCountry) {
        console.error('Player country not found, cannot generate AI action')
        return null
      }

      const aiContext = {
        country,
        playerCountry,
        allCountries,
        recentEvents,
        actionHistory: [],
        currentMessage: prompt
      }
      
      const response = await aiDiplomacyService.generateAIResponse(aiContext)

      const actionData = JSON.parse(response.message)
      
      // Si por alguna raz√≥n la IA devuelve 'none', forzar una acci√≥n aleatoria
      if (actionData.action === 'none' || !actionData.action) {
        const actions = ['military_action', 'economic_sanction', 'conspiracy']
        actionData.action = actions[Math.floor(Math.random() * actions.length)]
        actionData.reasoning = 'Acci√≥n forzada por sistema agresivo'
        actionData.priority = 9
      }

      // Validar que el pa√≠s tenga recursos suficientes
      const actionCosts = {
        military_action: 50,
        economic_sanction: 30,
        conspiracy: 40
      }

      const cost = actionCosts[actionData.action as keyof typeof actionCosts] || 0
      
      // Si no tiene recursos suficientes, elegir una acci√≥n m√°s barata
      if (country.economy.gdp < cost) {
        if (country.economy.gdp >= 30) {
          actionData.action = 'economic_sanction'
          actionData.reasoning = 'Acci√≥n econ√≥mica por recursos limitados'
        } else {
          actionData.action = 'conspiracy'
          actionData.reasoning = 'Operaci√≥n encubierta por recursos muy limitados'
        }
      }

      // Asegurar que siempre hay un target v√°lido
      if (!actionData.target) {
        const possibleTargets = allCountries.filter(c => c.id !== country.id && c.id !== playerCountryId)
        if (possibleTargets.length > 0) {
          actionData.target = possibleTargets[Math.floor(Math.random() * possibleTargets.length)].id
        }
      }

      return {
        countryId: country.id,
        action: {
          type: actionData.action,
          targetCountry: actionData.target,
          cost: actionCosts[actionData.action as keyof typeof actionCosts] || 30
        } as GameAction,
        reasoning: actionData.reasoning || 'Acci√≥n agresiva autom√°tica',
        priority: Math.max(actionData.priority || 9, 9) // M√≠nimo prioridad 9 para superpotencias
      }
    } catch (error) {
      console.error('Error parsing AI action response:', error)
      return null
    }
  }

  /**
   * Construye el contexto para la toma de decisiones de IA
   */
  private buildActionContext(
    country: Country,
    allCountries: Country[],
    playerCountryId: string,
    recentEvents: GameEvent[]
  ): string {
    const playerCountry = allCountries.find(c => c.id === playerCountryId)
    const neighbors = allCountries.filter(c => 
      c.id !== country.id && 
      !c.ownedBy &&
      Math.abs(c.economy.gdp - country.economy.gdp) < 300
    )

    const recentEventsSummary = recentEvents
      .slice(-3)
      .map(e => `- ${e.title}: ${e.description}`)
      .join('\n')

    return `
Contexto mundial:
- Jugador (${playerCountry?.name}): PIB $${playerCountry?.economy.gdp}B, Estabilidad ${playerCountry?.stability}%
- Pa√≠ses vecinos relevantes: ${neighbors.map(c => `${c.name} (PIB: $${c.economy.gdp}B)`).join(', ')}

Eventos recientes:
${recentEventsSummary}

Relaciones diplom√°ticas:
${Object.entries(country.diplomaticRelations || {})
  .map(([id, relation]) => {
    const targetCountry = allCountries.find(c => c.id === id)
    return `- ${targetCountry?.name}: ${relation}%`
  })
  .join('\n')}`
  }

  /**
   * Ejecuta una acci√≥n proactiva y genera el evento correspondiente
   */
  private executeProactiveAction(
    proactiveAction: AIProactiveAction,
    countries: Country[],
    playerCountryId: string
  ): { event: GameEvent | null; updatedCountries: Country[] } {
    const sourceCountry = countries.find(c => c.id === proactiveAction.countryId)
    if (!sourceCountry) {
      return { event: null, updatedCountries: countries }
    }

    let updatedCountries = [...countries]
    let event: GameEvent | null = null

    // Deducir costo de la acci√≥n
    const sourceIndex = updatedCountries.findIndex(c => c.id === proactiveAction.countryId)
    if (sourceIndex !== -1) {
      updatedCountries[sourceIndex] = {
        ...updatedCountries[sourceIndex],
        economy: {
          ...updatedCountries[sourceIndex].economy,
          gdp: Math.max(0, updatedCountries[sourceIndex].economy.gdp - proactiveAction.action.cost)
        }
      }
    }

    // Generar evento basado en el tipo de acci√≥n
    switch (proactiveAction.action.type) {
      case 'military_action':
        event = this.createMilitaryActionEvent(proactiveAction, sourceCountry, countries)
        break
      case 'economic_sanction':
        event = this.createEconomicSanctionEvent(proactiveAction, sourceCountry, countries)
        break
      case 'conspiracy':
        event = this.createConspiracyEvent(proactiveAction, sourceCountry, countries)
        break
    }

    return { event, updatedCountries }
  }

  private createMilitaryActionEvent(
    action: AIProactiveAction,
    sourceCountry: Country,
    countries: Country[]
  ): GameEvent {
    const targetCountry = countries.find(c => c.id === action.action.targetCountry)
    
    return {
      id: `ai_military_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'warning',
      title: `‚öîÔ∏è ${sourceCountry.name} lanza ataque militar`,
      description: `${sourceCountry.name} ha decidido tomar acci√≥n militar contra ${targetCountry?.name || 'un pa√≠s vecino'}. Raz√≥n: ${action.reasoning}`,
      effects: [
        `${sourceCountry.name} gasta $${action.action.cost}B en la operaci√≥n`,
        `Tensiones militares en la regi√≥n`,
        `Impacto en la estabilidad regional`
      ],
      timestamp: Date.now(),
      countryEffects: {
        [action.countryId]: {
          stabilityChange: -5,
          economyChange: -action.action.cost
        },
        ...(targetCountry && {
          [targetCountry.id]: {
            stabilityChange: -15,
            economyChange: -20
          }
        })
      }
    }
  }

  private createEconomicSanctionEvent(
    action: AIProactiveAction,
    sourceCountry: Country,
    countries: Country[]
  ): GameEvent {
    const targetCountry = countries.find(c => c.id === action.action.targetCountry)
    
    return {
      id: `ai_sanction_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'info',
      title: `üíº ${sourceCountry.name} impone sanciones econ√≥micas`,
      description: `${sourceCountry.name} ha implementado sanciones econ√≥micas contra ${targetCountry?.name || 'varios pa√≠ses'}. Raz√≥n: ${action.reasoning}`,
      effects: [
        `${sourceCountry.name} invierte $${action.action.cost}B en sanciones`,
        `Restricciones comerciales implementadas`,
        `Impacto en las relaciones diplom√°ticas`
      ],
      timestamp: Date.now(),
      countryEffects: {
        [action.countryId]: {
          economyChange: -action.action.cost
        },
        ...(targetCountry && {
          [targetCountry.id]: {
            economyChange: -25,
            stabilityChange: -5
          }
        })
      }
    }
  }

  private createConspiracyEvent(
    action: AIProactiveAction,
    sourceCountry: Country,
    countries: Country[]
  ): GameEvent {
    const targetCountry = countries.find(c => c.id === action.action.targetCountry)
    
    return {
      id: `ai_conspiracy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'error',
      title: `üïµÔ∏è Operaci√≥n encubierta de ${sourceCountry.name}`,
      description: `${sourceCountry.name} ha ejecutado una operaci√≥n de inteligencia encubierta. Raz√≥n: ${action.reasoning}`,
      effects: [
        `${sourceCountry.name} gasta $${action.action.cost}B en operaciones secretas`,
        `Actividades de espionaje detectadas`,
        `Desestabilizaci√≥n pol√≠tica en la regi√≥n`
      ],
      timestamp: Date.now(),
      countryEffects: {
        [action.countryId]: {
          economyChange: -action.action.cost,
          stabilityChange: -2
        },
        ...(targetCountry && {
          [targetCountry.id]: {
            stabilityChange: -10,
            economyChange: -15
          }
        })
      }
    }
  }
}

export const aiProactiveActionsService = new AIProactiveActionsService()